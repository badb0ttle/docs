"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[5840],{5456:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>e,data:()=>l});var n=a(641);const t={},e=(0,a(6262).A)(t,[["render",function(i,s){return(0,n.uX)(),(0,n.CE)("div",null,s[0]||(s[0]=[(0,n.Fv)('<h1 id="最长上升子序列-longest-increasing-subsequence-lis" tabindex="-1"><a class="header-anchor" href="#最长上升子序列-longest-increasing-subsequence-lis"><span>最长上升子序列（Longest Increasing Subsequence，LIS）</span></a></h1><p>原文oi wiki:<a href="https://oi-wiki.org/dp/basic/" target="_blank" rel="noopener noreferrer">LIS</a></p><h2 id="简单情形" tabindex="-1"><a class="header-anchor" href="#简单情形"><span>简单情形</span></a></h2><p>在最长上升子序列问题中，我们引入两个关键变量 <code>i</code> 和 <code>j</code>。这里，<code>i</code> 表示以其作为结尾的最长上升子序列的长度，而 <code>j</code> 则作为连接点，在构建最长上升子序列的过程中起着重要作用。</p><p>需要特别注意的是，<code>dp[mx]</code> 并不一定就是最终答案。在得出所有以不同元素结尾的最长上升子序列长度后，我们需要遍历整个结果数组，才能找出真正的最长上升子序列长度。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">n;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">i)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    \tdp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i]</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    \tfor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> j</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;j</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">i;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">j)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    \t{</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    \t\tif</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[j]</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i])</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    \t\tdp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i]</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">max</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">dp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i],</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">dp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[j]</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    \t}</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ans</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">n;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">i)ans</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">max</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(ans,</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">dp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i]);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="困难情形-单调栈二分动态规划核心思想" tabindex="-1"><a class="header-anchor" href="#困难情形-单调栈二分动态规划核心思想"><span>困难情形：单调栈二分动态规划核心思想</span></a></h2><h3 id="_1-单调栈" tabindex="-1"><a class="header-anchor" href="#_1-单调栈"><span>1. 单调栈</span></a></h3><p>我们维护一个单调递增的栈 <code>stk</code>，这个栈用于存储当前有可能构成最长上升子序列的元素。栈的关键特性在于其中的元素始终保持单调递增，借助这一特性，我们能够快速定位当前元素在栈中应该插入的位置，从而高效地构建潜在的最长上升子序列。</p><h3 id="_2-二分查找" tabindex="-1"><a class="header-anchor" href="#_2-二分查找"><span>2. 二分查找</span></a></h3><p>对于序列中的每个元素 <code>a[i]</code>，我们运用二分查找算法在单调栈 <code>stk</code> 中找出第一个大于等于 <code>a[i]</code> 的位置。若该位置位于栈内，我们用 <code>a[i]</code> 替换此位置的元素；若不存在这样的位置，即 <code>a[i]</code> 大于栈内所有元素，我们将 <code>a[i]</code> 压入栈中。通过这种方式，不断优化栈内元素，逐步逼近最长上升子序列。</p><h3 id="_3-动态规划" tabindex="-1"><a class="header-anchor" href="#_3-动态规划"><span>3. 动态规划</span></a></h3><p>通过巧妙维护单调栈，我们能够动态地更新最长上升子序列的长度。在整个过程中，我们要牢记三个核心要点：</p><ul><li><strong>二分查找位置</strong>：准确运用二分查找确定元素在栈中的合适位置。</li><li><strong>更长则更新</strong>：当遇到能使上升子序列更长的元素时，要及时更新相关信息。这里强调的是不仅要长度更长，同时元素的值相对更“矮”，这样能为后续构建更长的子序列提供更多可能性。</li><li><strong>取代栈内的值</strong>：当找到合适位置时，用新元素替换栈内相应位置的元素，优化栈的结构。</li></ul><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">n;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">i)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t    {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\t    \tint</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> pos</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">lower_bound</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(stk</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,stk</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">top,</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i])</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">stk;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">\t    \t/*找到第一个大于等于a[i]的位置,注意，严格上升!如果是等元素则返回的是栈顶也就不会是top+1,如果题目说的是</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">\t    \t不降则就要找到第一个大于a[i]的位置取代,届时用upper_bound即可*/</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\t    \tif</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(pos</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">top</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)top</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//如果长度比top更长就取代这个位置,这一行是更新最大长度</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">\t    \tstk</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[pos]</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i];</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//取代</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t    \tans</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">max</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(ans,top);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="狄尔沃斯定理" tabindex="-1"><a class="header-anchor" href="#狄尔沃斯定理"><span>狄尔沃斯定理</span></a></h2><p>狄尔沃斯定理为我们理解最长上升子序列及其相关概念提供了新的视角，具体内容如下：</p><ul><li>最长不升子序列的最小覆盖数等于最长上升子序列的长度。</li><li>最长不降子序列的最小覆盖数等于最长下降子序列的长度。</li></ul><p>这个定理建立了不同类型子序列之间的内在联系，有助于我们更深入地理解序列的结构和性质，在解决相关问题时提供了有力的理论支持。</p>',19)]))}]]),l=JSON.parse('{"path":"/Algorithm/LIS.html","title":"Longest Increasing Subsequence(最长上升子序列）","lang":"zh-CN","frontmatter":{"title":"Longest Increasing Subsequence(最长上升子序列）","order":4,"editLink":false,"category":["算法知识"],"tag":["知识点"],"description":"最长上升子序列（Longest Increasing Subsequence，LIS） 原文oi wiki:LIS 简单情形 在最长上升子序列问题中，我们引入两个关键变量 i 和 j。这里，i 表示以其作为结尾的最长上升子序列的长度，而 j 则作为连接点，在构建最长上升子序列的过程中起着重要作用。 需要特别注意的是，dp[mx] 并不一定就是最终答案。...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/docs/Algorithm/LIS.html"}],["meta",{"property":"og:site_name","content":"Badbottle\'s blog"}],["meta",{"property":"og:title","content":"Longest Increasing Subsequence(最长上升子序列）"}],["meta",{"property":"og:description","content":"最长上升子序列（Longest Increasing Subsequence，LIS） 原文oi wiki:LIS 简单情形 在最长上升子序列问题中，我们引入两个关键变量 i 和 j。这里，i 表示以其作为结尾的最长上升子序列的长度，而 j 则作为连接点，在构建最长上升子序列的过程中起着重要作用。 需要特别注意的是，dp[mx] 并不一定就是最终答案。..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-17T10:26:42.000Z"}],["meta",{"property":"article:tag","content":"知识点"}],["meta",{"property":"article:modified_time","content":"2025-02-17T10:26:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Longest Increasing Subsequence(最长上升子序列）\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-17T10:26:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ℬ𝒶𝒹𝒷0𝓉𝓉𝓁ℯ\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"简单情形","slug":"简单情形","link":"#简单情形","children":[]},{"level":2,"title":"困难情形：单调栈二分动态规划核心思想","slug":"困难情形-单调栈二分动态规划核心思想","link":"#困难情形-单调栈二分动态规划核心思想","children":[{"level":3,"title":"1. 单调栈","slug":"_1-单调栈","link":"#_1-单调栈","children":[]},{"level":3,"title":"2. 二分查找","slug":"_2-二分查找","link":"#_2-二分查找","children":[]},{"level":3,"title":"3. 动态规划","slug":"_3-动态规划","link":"#_3-动态规划","children":[]}]},{"level":2,"title":"狄尔沃斯定理","slug":"狄尔沃斯定理","link":"#狄尔沃斯定理","children":[]}],"git":{"createdTime":1739788002000,"updatedTime":1739788002000,"contributors":[{"name":"badb0ttle","username":"badb0ttle","email":"2546744220@qq.com","commits":1,"url":"https://github.com/badb0ttle"}]},"readingTime":{"minutes":3.18,"words":955},"filePathRelative":"Algorithm/LIS.md","localizedDate":"2025年2月17日","excerpt":"\\n<p>原文oi wiki:<a href=\\"https://oi-wiki.org/dp/basic/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">LIS</a></p>\\n<h2>简单情形</h2>\\n<p>在最长上升子序列问题中，我们引入两个关键变量 <code>i</code> 和 <code>j</code>。这里，<code>i</code> 表示以其作为结尾的最长上升子序列的长度，而 <code>j</code> 则作为连接点，在构建最长上升子序列的过程中起着重要作用。</p>\\n<p>需要特别注意的是，<code>dp[mx]</code> 并不一定就是最终答案。在得出所有以不同元素结尾的最长上升子序列长度后，我们需要遍历整个结果数组，才能找出真正的最长上升子序列长度。</p>","autoDesc":true}')},6262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,n]of s)a[i]=n;return a}}}]);